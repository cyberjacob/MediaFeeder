@inject IJSRuntime JsRuntime
@using System.Text.Json
@using Microsoft.JSInterop
@implements IDisposable

<div id="ytplayer" style="width: 100%; height: 80vh;"></div>

@code {
    [Parameter] public string? VideoId { get; set; }

    // private IJSObjectReference? _youtubeLibraryModule;
    private IJSObjectReference? _youtubeCustomModule;
    private DotNetObjectReference<VideoFrame>? _videoFrameRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var _youtubeLibraryModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/iframe_api.js");
            _youtubeCustomModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/youtube.js");

            _videoFrameRef ??= DotNetObjectReference.Create(this);
            await _youtubeCustomModule.InvokeVoidAsync("initPlayer", _videoFrameRef, VideoId);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_youtubeCustomModule != null)
        {
        }
    }

    [JSInvokable]
    public Task onPlayerReady(JsonElement eventData)
    {
        Console.WriteLine("Player Ready: ");

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task onPlaybackQualityChange(JsonElement eventData)
    {
        Console.WriteLine("Quality change: ");

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task onPlaybackRateChange(object eventData)
    {
        Console.WriteLine("Playback rate change: ");

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task onError(object eventData)
    {
        Console.WriteLine("Playback Error: ");

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task onApiChange(object eventData)
    {
        Console.WriteLine("API Change: ");

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task onPlayerStateChange(JsonElement eventData)
    {
        Console.WriteLine("State change: ");

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _videoFrameRef?.Dispose();
        // _youtubeLibraryModule?.DisposeAsync();
        _youtubeCustomModule?.DisposeAsync();
    }

}
