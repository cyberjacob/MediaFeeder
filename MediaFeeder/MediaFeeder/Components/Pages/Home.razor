@page "/"
@page "/folder/{folderId:int}"
@page "/subscription/{subscriptionId:int}"
@using MediaFeeder.Components.Layout
@using MediaFeeder.Data
@using MediaFeeder.Data.db
@using MediaFeeder.Filters
@using Microsoft.EntityFrameworkCore
@layout ListLayout

<PageTitle>Home</PageTitle>

<FluentStack Orientation="Orientation.Horizontal">
<FluentSearch @ref=searchTest
              @bind-Value="@searchValue"
              Placeholder="Search for State" />
@* @bind-Value:after=HandleSearchInput *@

<FluentSelect TOption="SortOrders"
              Label="Sort"
              Items="@([
                         SortOrders.Newest,
                         SortOrders.Oldest,
                         SortOrders.PlaylistOrder,
                         SortOrders.ReversePlaylistOrder,
                         SortOrders.Popularity,
                         SortOrders.TopRated
                     ])"
              Placeholder="Make a selection..."
              OptionValue="@(p => p.ToString())"
              OptionText="@(p => p.ToString())"
              @bind-SelectedOption="@SortOrder" />

<FluentSelect TOption="bool?"
              Label="Show Only"
              Items="@([true, false, null])"
              Placeholder="Make a selection..."
              OptionValue="@(p => p.ToString())"
              OptionText="@(p => p ?? true ? "Watched" : "Not Watched")"
              @bind-SelectedOption="@ShowWatched" />

<FluentSelect TOption="bool?"
              Label="Show Only"
              Items="@([true, false, null])"
              Placeholder="Make a selection..."
              OptionValue="@(p => p.ToString())"
              OptionText="@(p => p ?? true ? "Downloaded" : "Not Downloaded")"
              @bind-SelectedOption="@ShowDownloaded" />

<FluentSelect TOption="int"
              Label="Results per page"
              Items="@([25, 50, 100, 200])"
              Placeholder="Make a selection..."
              OptionValue="@(p => p.ToString())"
              OptionText="@(p => p.ToString())"
              @bind-SelectedOption="@ResultsPerPage" />

<FluentButton IconStart="@(new Icons.Regular.Size16.PlayMultiple())">
    Watch All Now
</FluentButton>

<FluentButton IconStart="@(new Icons.Regular.Size16.BracesCheckmark())">
    Mark All as Watched
</FluentButton>

<FluentButton IconStart="@(new Icons.Regular.Size16.Timer())">
    TIME
</FluentButton>

<FluentButton IconStart="@(new Icons.Regular.Size16.ArrowShuffle())">
    Shuffle
</FluentButton>
</FluentStack>

<h1>Hello, world!</h1>

Welcome to your new app.

<p>Folder: @FolderId</p>
<p>Subscription: @SubscriptionId</p>

<FluentGrid Spacing="5" AdaptiveRendering="true">
    @if (Videos != null)
    {
        @foreach (var video in Videos)
        {
            <FluentGridItem md="3" sm="6" xs="12">
                <FluentCard>
                    <img src="@video.Thumb"/>
                    <img src="@video.Thumbnail"/>
                    Downloaded: @(video.DownloadedPath == null)
                    Watched: @video.Watched
                    New: @video.New

                    Name: @video.Name

                    @video.Views Views
                    @video.PublishDate
                    @video.DurationSpan

                    <p>@video.Description</p>

                    <FluentButton Appearance="Appearance.Accent">Hello</FluentButton>
                </FluentCard>
            </FluentGridItem>
        }
    }
    else
    {
        <FluentSkeleton Shape="SkeletonShape.Circle"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px" Height="10px;"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px" Height="10px;"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px" Height="10px;"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 20px;margin-bottom: 10px;" Width="75px" Height="30px"></FluentSkeleton>
    }
</FluentGrid>

@code {
    [Parameter]
    public int? FolderId { get; set; }
    
    [Parameter]
    public int? SubscriptionId { get; set; }
    
    public List<YtManagerAppVideo>? Videos { get; set; }
    
    [Inject]
    public MediaFeederDataContext? DataContext { get; set; }
    
    FluentSearch? searchTest;
    string? searchValue { get; set; } = string.Empty;
    SortOrders SortOrder { get; set; } = SortOrders.Oldest;
    bool? ShowWatched { get; set; } = true;
    bool? ShowDownloaded { get; set; }
    int ResultsPerPage  { get; set; } = 50;

    protected async override Task OnParametersSetAsync()
    {
        var source = DataContext.YtManagerAppVideos.AsQueryable();

        if (FolderId != null)
        {
            source = source.Where(v => v.Subscription.ParentFolderId == FolderId);
        }

        if (SubscriptionId != null)
        {
            source = source.Where(v => v.SubscriptionId == SubscriptionId);
        }

        source = SortOrder switch
        {
            SortOrders.Oldest => source.OrderBy(v => v.PublishDate),
            SortOrders.Newest => source.OrderByDescending(v => v.PublishDate),
            SortOrders.PlaylistOrder => source.OrderBy(v => v.PlaylistIndex),
            SortOrders.ReversePlaylistOrder => source.OrderByDescending(v => v.PlaylistIndex),
            SortOrders.Popularity => source.OrderByDescending(v => v.Views),
            SortOrders.TopRated => source.OrderByDescending(v => v.Rating),
            _ => source
        };
        
        if(ShowWatched != null)
            source = source.Where(v => v.Watched == ShowWatched);

        if (ShowDownloaded != null)
            source = source.Where(v => string.IsNullOrWhiteSpace(v.DownloadedPath) != ShowDownloaded);
        
        if (!string.IsNullOrWhiteSpace(searchValue))
        {
            source = source.Where(v => v.Name.Contains(searchValue) || v.Description.Contains((searchValue)));
        }

        source = source.Take(ResultsPerPage);

        Videos = await source.ToListAsync();
        
        await base.OnParametersSetAsync();
    }
}
