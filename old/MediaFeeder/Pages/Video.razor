@page "/video/{id:int}/{next}"
@page "/video/{id:int}"
@using MediaFeeder.Data
@using MediaFeeder.Models
@using MediaFeeder.Models.db
@using Microsoft.EntityFrameworkCore
@using Humanizer
@inject NavigationManager _navigationManager
@inject MediaFeederDataContext _context
@inject IServiceProvider _serviceProvider

@if(_frame != null && _video != null) {
    <DynamicComponent Type="@_frame" Parameters="@(new Dictionary<string, object>() {{"VideoId", _video.VideoId}})"/>
    <MudContainer>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.body2">
                    @if (_video.Views > 0)
                    {
                        <span>@_video.Views.ToMetric() views &#x2022; </span>
                    }
                    <span>@_video.PublishDate.Humanize()</span>
                    @if (_video.Rating > 0)
                    {
                        <span> &#x2022; @_video.Rating </span>
                    }
                </MudText>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudIconButton Icon="@@Icons.Filled.SmartDisplay" Title="Watch on YouTube" Link="@("https://youtube.com/watch?v="+_video.VideoId)" />
                <MudIconButton Icon="@@WatchButtonIcon" Title="@@WatchButtonText" Color="@@WatchButtonColour" />
                <MudIconButton Icon="@@Icons.Filled.FastForward" Title="Go to next video" />
                <MudIconButton Icon="@@DownloadButtonIcon" Title="@@DownloadButtonText" Color="@@DownloadButtonColour" />
                

                {% if up_next_count %}
                <span class="btn btn-secondary ajax-link nav-item" style="margin: 0 3px;">{{ up_next_count }}, {{ up_next_duration }}</span>
                {% endif %}
            </MudItem>
        </MudGrid>
        <MudText Typo="Typo.body1">@_video.Description</MudText>
    </MudContainer>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Next { get; set; }

    [CascadingParameter] MainLayout MainLayout { get; set; }

    private YtManagerAppVideo? _video;
    private Type? _frame;

    protected override async Task OnInitializedAsync()
    {
        _video = _context.YtManagerAppVideos.Single(v => v.Id == Id);
        await _context.Entry(_video).Reference(v => v.Subscription).LoadAsync();
        _frame = _serviceProvider.GetServices<IProvider>()
            .Single(provider => provider.ProviderIdentifier == _video.Subscription.Provider)
            .VideoFrameView;

        MainLayout.Title = _video.Name;
        MainLayout.ShowSidebar = false;
    }

    // private string WatchButtonIcon => _video.Watched ? Icons.Filled.RemoveRedEye : Icons.Outlined.RemoveRedEye;
    // private string WatchButtonText => _video.Watched ? "Mark not watched" : "Mark Watched";
    // private Color WatchButtonColour => _video.Watched ? Color.Success : Color.Default;

    // private string DownloadButtonIcon => _video.DownloadedPath != null ? Icons.Filled.Download : Icons.Outlined.Download;
    // private string DownloadButtonText => _video.DownloadedPath != null ? "Delete downloaded" : "Download now";
    // private Color DownloadButtonColour => _video.DownloadedPath != null ? Color.Success : Color.Default;
}
